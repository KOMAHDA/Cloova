// –í com.example.cloova.adapter/SavedOutfitsAdapter.java

package com.example.cloova.adapter;

import android.app.AlertDialog;
import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.cloova.DatabaseHelper;
import com.example.cloova.R;
import com.example.cloova.model.ClothingItem;
import com.example.cloova.model.SavedOutfit;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class SavedOutfitsAdapter extends RecyclerView.Adapter<SavedOutfitsAdapter.SavedOutfitViewHolder> {

    private List<SavedOutfit> savedOutfits;
    private Context context;
    private OnItemDeleteListener deleteListener; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    private static final String TAG = "SavedOutfitsAdapter";

    public interface OnItemDeleteListener {
        void onDeleteClick(SavedOutfit outfit);
    }

    public SavedOutfitsAdapter(Context context, List<SavedOutfit> savedOutfits, OnItemDeleteListener deleteListener) {
        this.context = context;
        this.savedOutfits = savedOutfits;
        this.deleteListener = deleteListener;
    }

    public void updateData(List<SavedOutfit> newOutfits) {
        this.savedOutfits.clear();
        if (newOutfits != null) {
            this.savedOutfits.addAll(newOutfits);
        }
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public SavedOutfitViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_saved_outfit, parent, false);
        return new SavedOutfitViewHolder(view, deleteListener);
    }

    @Override
    public void onBindViewHolder(@NonNull SavedOutfitViewHolder holder, int position) {
        SavedOutfit outfit = savedOutfits.get(position);
        holder.bind(outfit, context);
    }

    @Override
    public int getItemCount() {
        return savedOutfits == null ? 0 : savedOutfits.size();
    }


    static class SavedOutfitViewHolder extends RecyclerView.ViewHolder {
        TextView tvSavedDate, tvSavedWeatherInfo, tvSavedOutfitDetails;
        ImageButton btnDeleteOutfit;
        ImageView ivSavedMannequin;
        ImageView ivSavedOutfitOuterwear, ivSavedOutfitTop, ivSavedOutfitBottom, ivSavedOutfitShoes;

        OnItemDeleteListener deleteListener; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        public SavedOutfitViewHolder(@NonNull View itemView, OnItemDeleteListener deleteListener) {
            super(itemView);
            this.deleteListener = deleteListener;
            tvSavedDate = itemView.findViewById(R.id.tv_saved_date);
            tvSavedWeatherInfo = itemView.findViewById(R.id.tv_saved_weather_info);
            tvSavedOutfitDetails = itemView.findViewById(R.id.tv_saved_outfit_details);
            btnDeleteOutfit = itemView.findViewById(R.id.btn_delete_outfit);
            ivSavedMannequin = itemView.findViewById(R.id.iv_saved_mannequin);

            ivSavedOutfitOuterwear = itemView.findViewById(R.id.iv_saved_outfit_outerwear);
            ivSavedOutfitTop = itemView.findViewById(R.id.iv_saved_outfit_top);
            ivSavedOutfitBottom = itemView.findViewById(R.id.iv_saved_outfit_bottom);
            ivSavedOutfitShoes = itemView.findViewById(R.id.iv_saved_outfit_shoes);
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            btnDeleteOutfit.setOnClickListener(v -> {
                if (getAdapterPosition() != RecyclerView.NO_POSITION && deleteListener != null) {
                    deleteListener.onDeleteClick((SavedOutfit) itemView.getTag()); // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–≥–∞
                }
            });
        }

        void bind(final SavedOutfit outfit, final Context context) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ tag –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Listener
            itemView.setTag(outfit);

            tvSavedDate.setText(formatDate(outfit.getDateSaved()));
            tvSavedWeatherInfo.setText(String.format(Locale.getDefault(), "%s¬∞C, %s, %s —Å—Ç–∏–ª—å",
                    (int) outfit.getTemperature(), outfit.getWeatherDescription(), outfit.getStyleName()));

            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ ImageView –æ–¥–µ–∂–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            ivSavedOutfitOuterwear.setVisibility(View.GONE);
            ivSavedOutfitTop.setVisibility(View.GONE);
            ivSavedOutfitBottom.setVisibility(View.GONE);
            ivSavedOutfitShoes.setVisibility(View.GONE);

            StringBuilder outfitTextBuilder = new StringBuilder();
            Map<String, ClothingItem> outfitItemsMap = outfit.getOutfitItems();

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if (outfitItemsMap.containsKey("–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞")) {
                ClothingItem item = outfitItemsMap.get("–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞");
                setOutfitImage(ivSavedOutfitOuterwear, item.getImageResourceName(), context);
                outfitTextBuilder.append("üß• ").append(item.getName()).append("\n");
            }
            if (outfitItemsMap.containsKey("–≤–µ—Ä—Ö")) {
                ClothingItem item = outfitItemsMap.get("–≤–µ—Ä—Ö");
                setOutfitImage(ivSavedOutfitTop, item.getImageResourceName(), context);
                outfitTextBuilder.append("üëï ").append(item.getName()).append("\n");
            }
            if (outfitItemsMap.containsKey("–ø–ª–∞—Ç—å—è/—é–±–∫–∏")) { // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞—Ç—å–µ, —Ç–æ —ç—Ç–æ "–≤–µ—Ä—Ö"
                ClothingItem item = outfitItemsMap.get("–ø–ª–∞—Ç—å—è/—é–±–∫–∏");
                setOutfitImage(ivSavedOutfitTop, item.getImageResourceName(), context); // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ —Ç–æ—Ç –∂–µ —Å–ª–æ—Ç
                outfitTextBuilder.append("üëó ").append(item.getName()).append("\n");
            }
            if (outfitItemsMap.containsKey("–Ω–∏–∑")) {
                ClothingItem item = outfitItemsMap.get("–Ω–∏–∑");
                setOutfitImage(ivSavedOutfitBottom, item.getImageResourceName(), context);
                outfitTextBuilder.append("üëñ ").append(item.getName()).append("\n");
            }
            if (outfitItemsMap.containsKey("–æ–±—É–≤—å")) {
                ClothingItem item = outfitItemsMap.get("–æ–±—É–≤—å");
                setOutfitImage(ivSavedOutfitShoes, item.getImageResourceName(), context);
                outfitTextBuilder.append("üëü ").append(item.getName()).append("\n");
            }

            tvSavedOutfitDetails.setText(outfitTextBuilder.toString().trim()); // trim() —É–±–µ—Ä–µ—Ç –ª–∏—à–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        }

        private String formatDate(String dateTimeStr) {
            try {
                // –í—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç: "YYYY-MM-DD HH:MM:SS"
                SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
                // –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: "d MMMM yyyy, HH:mm" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "25 –º–∞—è 2025, 15:30")
                SimpleDateFormat outputFormat = new SimpleDateFormat("d MMMM yyyy, HH:mm", new Locale("ru", "RU")); // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –º–µ—Å—è—Ü–∞
                Date date = inputFormat.parse(dateTimeStr);
                return outputFormat.format(date);
            } catch (ParseException e) {
                Log.e(TAG, "Error parsing date: " + dateTimeStr, e);
                return dateTimeStr; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            }
        }

        private void setOutfitImage(ImageView imageView, String imageResourceName, Context context) {
            if (imageView == null || imageResourceName == null || imageResourceName.isEmpty()) {
                Log.w(TAG, "setOutfitImage: ImageView is null or imageResourceName is empty.");
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å. –ò–º—è —Ä–µ—Å—É—Ä—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ drawable.
            int resId = context.getResources().getIdentifier(imageResourceName, "drawable", context.getPackageName());
            if (resId != 0) {
                imageView.setImageResource(resId);
                imageView.setVisibility(View.VISIBLE);
                Log.d(TAG, "setOutfitImage: Set '" + imageResourceName + "' to " + imageView.getId());
            } else {
                Log.e(TAG, "setOutfitImage: Resource not found for name: " + imageResourceName + ". Setting visibility to GONE.");
                imageView.setVisibility(View.GONE);
            }
        }
    }
}